#!/usr/bin/env Rscript
#./mapstats -m meta.rds -c counts.rds -o mapstats.dir


###
#Get opt
###
library('getopt')

argv = commandArgs(trailingOnly = F)  
scriptPath = dirname(sub("--file=", "", argv[grep("--file", argv)]))
#source(file.path(scriptPath, '../lib/getopt.R')) #If one wants to avoid dependency of installed R package (getopt).
argv = commandArgs(trailingOnly = T)

spec = matrix(c(
  'meta.file', 'm', 1, 'character',
  'counts.file', 'c', 1, 'character',
  'res.dir', 'o', 1, 'character',
  'strat.factor', 's', 1, 'character',
  'cex', 'x', 1, 'double',
  'qc.meta.file', 'q', 1, 'character',
  'mapped.prc.cutoff', 'u', 1, 'numeric',
  'nreads.cutoff', 'n', 1, 'numeric',
  'filter.bool', 'f', 1, 'logical',
  'plot.bool', 'p', 1, 'logical',
  'lib.dir', 'l', 1, 'character',
  'help', 'h', 0, 'logical'
), byrow=TRUE, ncol=4);
opt = getopt(spec)

usage <- function(spec){
  cat(getopt(spec, command = 'mapstats', usage=TRUE));
  cat(sprintf("Plot mapping statistics and set related filters.\n"))
  cat(sprintf(" -m meta.file\n\tInput file in rds-format, containing mapping statistics (output by the program get_meta).\n"))
  cat(sprintf(" -c counts.file\n\tInput file in rds-format, containing raw read counts for all samples and features (output by the program get_expr).\n"))
  cat(sprintf(" -o res.dir\n\tOutput directory.\n"))
  cat(sprintf(" -s strat.factor\n\tStratification factor, which will group the samples in some of the plots. Default: nostrat.\n"))
  cat(sprintf(" -x cex\n\tMagnification level of the text in the figures. Default: 0.8\n"))
  cat(sprintf(" -q qc.meta.file\n\tOutput file in rds-format to which qc-failed samples are stored. If the file already exists a column is added and if the column already exists (n.genes.expr) it is updated. Default: qc.meta.rds\n"))
  cat(sprintf(" -u mapped.prc.cutoff\n\tCutoff for percent mapped reads. Samples with less than mapped.prc.cutoff mapped reads are flagged and stored in qc.meta.file if the -f flag is provided. Default: 0.2\n"))
  cat(sprintf(" -n nreads.cutoff\n\tCutoff for number of sequenced reads. Samples with less than nreads.cutoff nreads are flagged and stored in qc.meta.file if the flag -f is provided. Default: 100\n"))  
  cat(sprintf(" -f filter\n\tSave qc-failed samples or not to qc.meta.file (option -q). Allowed values: {TRUE, FALSE}. Default: TRUE\n"))
  cat(sprintf(" -p plot\n\tPlot smoothed histogram of the number of expressed genes per sample. Allowed values: {TRUE, FALSE}. Default: TRUE\n"))
  cat(sprintf(" -l lib.dir\n\tLibrary directory with required R functions. Default: A subdir residing '../lib' relative to where this program was executed from.\n\n"))
  q(status=1);
}

#Print usage if help flag set
if(!is.null(opt[['help']])){
  usage(spec)
}

#Error check that all required options were set
if(is.null(opt[['meta.file']])){warning('Error: "m" is a required option'); usage(spec);}
if(is.null(opt[['counts.file']])){warning('Error: "c" is a required option'); usage(spec);}
if(is.null(opt[['res.dir']])){warning('Error: "o" is a required option'); usage(spec);}

#Set defaults for optional options
if(is.null(opt[['strat.factor']])){opt[['strat.factor']] = 'nostrat';}
if(is.null(opt[['cex']])){opt[['cex']] = 0.8;}
if(is.null(opt[['qc.meta.file']])){opt[['qc.meta.file']] = 'qc.meta.rds';}
if(is.null(opt[['mapped.prc.cutoff']])){opt[['mapped.prc.cutoff']] = 0.2;}
if(is.null(opt[['nreads.cutoff']])){opt[['nreads.cutoff']] = 100;}
if(is.null(opt[['filter.bool']])){opt[['filter.bool']] = TRUE;}
if(is.null(opt[['plot.bool']])){opt[['plot.bool']] = TRUE;}
if(is.null(opt[['lib.dir']])){opt[['lib.dir']] = file.path(scriptPath, '../lib');}


###
#Source fcn libs
###
source(file.path(opt[['lib.dir']], 'expr.lib.R'), chdir = TRUE)
source(file.path(opt[['lib.dir']], 'main.lib.R'), chdir = TRUE)


###
#Execute
###
mapstats(opt[['meta.file']], opt[['counts.file']], opt[['res.dir']], opt[['strat.factor']], opt[['cex']], opt[['qc.meta.file']], opt[['prc.mapped.cutoff']], opt[['nreads.cutoff']], opt[['filter.bool']], opt[['plot.bool']])
