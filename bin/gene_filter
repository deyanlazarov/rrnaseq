#!/usr/bin/env Rscript
#gene_filter -m meta.rds -r rpkm.rds -o rpkm.postqc.rds -d gene2nsamples.pdf 
#Filter all genes not passing a filter of expr in n samples in any stratum


###
#Get opt
###
library('getopt')

argv = commandArgs(trailingOnly = F)  
scriptPath = dirname(sub("--file=", "", argv[grep("--file", argv)]))
#source(file.path(scriptPath, '../lib/getopt.R')) #If one wants to avoid dependency of installed R package (getopt).
argv = commandArgs(trailingOnly = T)

spec = matrix(c(
  'meta.file', 'm', 1, 'character',
  'rpkm.file', 'r', 1, 'character',
  'rpkm.postqc.file', 'o', 1, 'character',
  'gene2nsamples.pdf', 'd', 1, 'character',
  'log.rpkm.cutoff', 'c', 1, 'double',
  'n.cells.cutoff', 'n', 1, 'numeric',
  'strat.factor', 's', 1, 'character',
  'filter.bool', 'f', 1, 'logical',
  'plot.bool', 'p', 1, 'logical',
  'lib.dir', 'l', 1, 'character',
  'help', 'h', 0, 'logical'
), byrow=TRUE, ncol=4);
opt = getopt(spec)

usage <- function(spec){
  cat(getopt(spec, command = 'gene_filter', usage=TRUE));
  cat(sprintf("Filter genes based on the number of samples they are expressed in and plot histogram of it\n"))
  cat(sprintf(" -m meta.file\n\tInput file in rds-format, containing sample meta-information (output by the program get_meta).\n"))
  cat(sprintf(" -r rpkm.file\n\tInput file in rds-format, containing normalized read counts for all samples and features (output by the program get_expr).\n"))
  cat(sprintf(" -o rpkm.postqc.file\n\tOutput file in rds-format, containing normalized read counts, where features have been filtered based on the number of samples they are expressed in.\n"))
  cat(sprintf(" -d gene2nsamples.pdf\n\tOutput file to which the plot is printed. Default: gene2nsamples.pdf\n"))
  cat(sprintf(" -c log.rpkm.cutoff\n\tExpression cutoff in log10-scale used to determine if a gene is expressed or not. Default: 0\n"))
  cat(sprintf(" -n n.cells.cutoff\n\tCutoff for the number of samples that a gene needs to be expressed in to not be filtered out. Default: 2\n"))
  cat(sprintf(" -s strat.factor\n\tStratification factor, which will group the samples in some of the plots. Default: nostrat\n"))
  cat(sprintf(" -f filter\n\tApply gene filter or not. Allowed values: {TRUE, FALSE}. Default: TRUE\n"))
  cat(sprintf(" -p plot\n\tPlot fraction of genes expressed versus number of samples. Allowed values: {TRUE, FALSE}. Default: TRUE\n"))
  cat(sprintf(" -l lib.dir\n\tLibrary directory with required R functions. Default: A subdir residing at '../lib' relative to where this program was executed from.\n\n"))
  q(status=1);
}

#Print usage if help flag set
if(!is.null(opt[['help']])){
  usage(spec)
}

#Error check that all required options were set
if(is.null(opt[['meta.file']])){warning('Error: "m" is a required option'); usage(spec);}
if(is.null(opt[['rpkm.file']])){warning('Error: "r" is a required option'); usage(spec);}
if(is.null(opt[['rpkm.postqc.file']])){warning('Error: "o" is a required option'); usage(spec);}

#Set defaults for optional options
if(is.null(opt[['gene2nsamples.pdf']])){opt[['gene2nsamples.pdf']] = 'gene2nsamples.pdf';}
if(is.null(opt[['log.rpkm.cutoff']])){opt[['log.rpkm.cutoff']] = 0;}
if(is.null(opt[['n.cells.cutoff']])){opt[['n.cells.cutoff']] = 2;}
if(is.null(opt[['strat.factor']])){opt[['strat.factor']] = 'nostrat';}
if(is.null(opt[['filter.bool']])){opt[['filter.bool']] = TRUE;}
if(is.null(opt[['plot.bool']])){opt[['plot.bool']] = TRUE;}
if(is.null(opt[['lib.dir']])){opt[['lib.dir']] = file.path(scriptPath, '../lib');}


###
#Source fcn libs
###
source(file.path(opt[['lib.dir']], 'expr.lib.R'), chdir = TRUE)
source(file.path(opt[['lib.dir']], 'main.lib.R'), chdir = TRUE)


###
#Execute
###
gene.filter(opt[['meta.file']], opt[['rpkm.file']], opt[['rpkm.postqc.file']], opt[['gene2nsamples.pdf']], opt[['strat.factor']], opt[['log.rpkm.cutoff']], opt[['n.cells.cutoff']], opt[['filter.bool']], opt[['plot.bool']])
